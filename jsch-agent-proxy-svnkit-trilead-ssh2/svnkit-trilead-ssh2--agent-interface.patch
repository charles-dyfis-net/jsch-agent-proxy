Index: trilead-ssh2/src/main/java/com/trilead/ssh2/Connection.java
===================================================================
--- trilead-ssh2/src/main/java/com/trilead/ssh2/Connection.java	(revision 153)
+++ trilead-ssh2/src/main/java/com/trilead/ssh2/Connection.java	(working copy)
@@ -1,15 +1,7 @@
 
 package com.trilead.ssh2;
 
-import java.io.CharArrayWriter;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.net.SocketTimeoutException;
-import java.security.SecureRandom;
-import java.util.Vector;
-
+import com.trilead.ssh2.auth.AgentProxy;
 import com.trilead.ssh2.auth.AuthenticationManager;
 import com.trilead.ssh2.channel.ChannelManager;
 import com.trilead.ssh2.crypto.CryptoWishList;
@@ -23,6 +15,15 @@
 import com.trilead.ssh2.util.TimeoutService;
 import com.trilead.ssh2.util.TimeoutService.TimeoutToken;
 
+import java.io.CharArrayWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketTimeoutException;
+import java.security.SecureRandom;
+import java.util.Vector;
+
 /**
  * A <code>Connection</code> is used to establish an encrypted TCP/IP
  * connection to a SSH-2 server.
@@ -214,6 +215,27 @@
 		return authenticateWithKeyboardInteractive(user, null, cb);
 	}
 
+	public synchronized boolean authenticateWithAgent(String user, AgentProxy proxy) throws IOException {
+		if (tm == null)
+			throw new IllegalStateException("Connection is not established!");
+
+		if (authenticated)
+			throw new IllegalStateException("Connection is already authenticated!");
+
+		if (am == null)
+			am = new AuthenticationManager(tm);
+
+		if (cm == null)
+			cm = new ChannelManager(tm);
+
+		if (user == null)
+			throw new IllegalArgumentException("user argument is null");
+
+		authenticated = am.authenticatePublicKey(user, proxy);
+
+		return authenticated;
+	}
+
 	/**
 	 * After a successful connect, one has to authenticate oneself. This method
 	 * is based on "keyboard-interactive", specified in
Index: trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentIdentity.java
===================================================================
--- trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentIdentity.java	(revision 0)
+++ trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentIdentity.java	(revision 0)
@@ -0,0 +1,7 @@
+package com.trilead.ssh2.auth;
+
+public interface AgentIdentity {
+    public String getAlgName();
+    public byte[] getPublicKeyBlob();
+    public byte[] sign(byte[] data);
+}
Index: trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AuthenticationManager.java
===================================================================
--- trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AuthenticationManager.java	(revision 153)
+++ trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AuthenticationManager.java	(working copy)
@@ -1,34 +1,19 @@
 
 package com.trilead.ssh2.auth;
 
-import java.io.IOException;
-import java.security.SecureRandom;
-import java.util.Vector;
-
 import com.trilead.ssh2.InteractiveCallback;
 import com.trilead.ssh2.crypto.PEMDecoder;
-import com.trilead.ssh2.packets.PacketServiceAccept;
-import com.trilead.ssh2.packets.PacketServiceRequest;
-import com.trilead.ssh2.packets.PacketUserauthBanner;
-import com.trilead.ssh2.packets.PacketUserauthFailure;
-import com.trilead.ssh2.packets.PacketUserauthInfoRequest;
-import com.trilead.ssh2.packets.PacketUserauthInfoResponse;
-import com.trilead.ssh2.packets.PacketUserauthRequestInteractive;
-import com.trilead.ssh2.packets.PacketUserauthRequestNone;
-import com.trilead.ssh2.packets.PacketUserauthRequestPassword;
-import com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;
-import com.trilead.ssh2.packets.Packets;
-import com.trilead.ssh2.packets.TypesWriter;
-import com.trilead.ssh2.signature.DSAPrivateKey;
-import com.trilead.ssh2.signature.DSASHA1Verify;
-import com.trilead.ssh2.signature.DSASignature;
-import com.trilead.ssh2.signature.RSAPrivateKey;
-import com.trilead.ssh2.signature.RSASHA1Verify;
-import com.trilead.ssh2.signature.RSASignature;
+import com.trilead.ssh2.packets.*;
+import com.trilead.ssh2.signature.*;
 import com.trilead.ssh2.transport.MessageHandler;
 import com.trilead.ssh2.transport.TransportManager;
 
+import java.io.IOException;
+import java.security.SecureRandom;
+import java.util.Iterator;
+import java.util.Vector;
 
+
 /**
  * AuthenticationManager.
  * 
@@ -158,6 +143,73 @@
 		return authenticated;
 	}
 
+	public boolean authenticatePublicKey(String user, AgentProxy proxy) throws IOException {
+		initialize(user);
+
+		boolean success = false;
+		Iterator agentIdentities = proxy.getIdentities().iterator();
+		while(agentIdentities.hasNext()) {
+			AgentIdentity identity = (AgentIdentity)agentIdentities.next();
+			success = authenticatePublicKey(user, proxy, identity);
+			if(success) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	boolean authenticatePublicKey(String user, AgentProxy proxy, AgentIdentity identity) throws IOException {
+
+		if (methodPossible("publickey") == false)
+			throw new IOException("Authentication method publickey not supported by the server at this stage.");
+
+		byte[] pubKeyBlob = identity.getPublicKeyBlob();
+		if(pubKeyBlob == null) {
+			return false;
+		}
+
+		TypesWriter tw = new TypesWriter();
+		byte[] H = tm.getSessionIdentifier();
+
+		tw.writeString(H, 0, H.length);
+		tw.writeByte(Packets.SSH_MSG_USERAUTH_REQUEST);
+		tw.writeString(user);
+		tw.writeString("ssh-connection");
+		tw.writeString("publickey");
+		tw.writeBoolean(true);
+		tw.writeString(identity.getAlgName());
+		tw.writeString(pubKeyBlob, 0, pubKeyBlob.length);
+
+		byte[] msg = tw.getBytes();
+		byte[] response = identity.sign(msg);
+
+		PacketUserauthRequestPublicKey ua = new PacketUserauthRequestPublicKey(
+				"ssh-connection", user, identity.getAlgName(), pubKeyBlob, response);
+		tm.sendMessage(ua.getPayload());
+
+		byte[] ar = getNextMessage();
+
+		if (ar[0] == Packets.SSH_MSG_USERAUTH_SUCCESS)
+		{
+			authenticated = true;
+			tm.removeMessageHandler(this, 0, 255);
+			return true;
+		}
+
+		if (ar[0] == Packets.SSH_MSG_USERAUTH_FAILURE)
+		{
+			PacketUserauthFailure puf = new PacketUserauthFailure(ar, 0, ar.length);
+
+			remainingMethods = puf.getAuthThatCanContinue();
+			isPartialSuccess = puf.isPartialSuccess();
+
+			return false;
+		}
+
+		throw new IOException("Unexpected SSH message (type " + ar[0] + ")");
+	}
+
+
 	public boolean authenticatePublicKey(String user, char[] PEMPrivateKey, String password, SecureRandom rnd)
 			throws IOException
 	{
Index: trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentProxy.java
===================================================================
--- trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentProxy.java	(revision 0)
+++ trilead-ssh2/src/main/java/com/trilead/ssh2/auth/AgentProxy.java	(revision 0)
@@ -0,0 +1,7 @@
+package com.trilead.ssh2.auth;
+
+import java.util.Collection;
+
+public interface AgentProxy {
+    public Collection/*<AgentIdentity>*/ getIdentities();
+}
